#!/bin/bash
# File Managed by Puppet
<% if operatingsystem == 'RedHat' or operatingsystem == 'CentOS' or operatingsystem == 'Scientific' %>
# graylog2-webinterface        Startup script for graylog2-webinterface
#
# chkconfig: - 85 15
# description: graylog2-webinterface
<% elsif operatingsystem == 'Debian' or operatingsystem == 'Ubuntu' or operatingsystem == 'Mint' %>
### BEGIN INIT INFO
# Provides:          graylog2-webinterface
# Required-Start:    $local_fs $remote_fs $network 
# Required-Stop:     $local_fs $remote_fs $network 
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start/stop graylog2-webinterface service
### END INIT INFO
<% end %>



CMD=$1
NOHUP=`which nohup`

GRAYLOG2_HOME=<%= scope.lookupvar('graylog2::webinterface_home') %>
GRAYLOG2_SERVER_JAR=graylog2-webinterface.jar
GRAYLOG2_CONF=<%= scope.lookupvar('graylog2::config_file') %>
GRAYLOG2_PID=$GRAYLOG2_HOME/tmp/pids/server.pid
GRAYLOG2_LOG_DIR=$GRAYLOG2_HOME/log
GRAYLOG2_LOG_FILE=$GRAYLOG2_HOME/log/<%= scope.lookupvar('graylog2::webinterface_rails_environment') %>.log
mkdir -p $GRAYLOG2_LOG_DIR

start() {
    echo "Starting graylog2-webinterface ..."
    cd "$GRAYLOG2_HOME"
    export RAILS_ENV=<%= scope.lookupvar('graylog2::webinterface_rails_environment') %>
    $NOHUP bundle exec rails server >> ${GRAYLOG2_LOG_FILE} &
#    echo $! > ${GRAYLOG2_PID}
    echo "graylog2-web-interface_running"
}

stop() {
    PID=`cat ${GRAYLOG2_PID}`
    echo "Stopping graylog2-webinterface ($PID) ..."
    if kill -9 $PID; then
        rm ${GRAYLOG2_PID}
    fi
}

restart() {
    echo "Restarting graylog2-webinterface ..."
    stop
    start
}

status() {
    pid=$(get_pid)
    if [ ! -z $pid ]; then
        if pid_running $pid; then
            echo "graylog2-webinterface running as pid $pid"
            return 0
        else
            echo "Stale pid file with $pid - removing..."
            rm ${GRAYLOG2_PID}
        fi
    fi

    echo "graylog2-webinterface not running"
    exit 1
}

get_pid() {
    cat ${GRAYLOG2_PID} 2> /dev/null
}

pid_running() {
    kill -0 $1 2> /dev/null
}

case "$CMD" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    *)
        echo "Usage $0 {start|stop|restart|status}"
        RETVAL=1
esac

